# Th√¥ng tin OAuth 2.0 t·ª´ Google Developer Console
CLIENT_ID = "925033313970-9lr61c64njpv9brqnp3rc4ut7kdt0uli.apps.googleusercontent.com"
CLIENT_SECRET = "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"
REFRESH_TOKEN = "1//04SAIRpuZugbkCgYIARAAGAQSNwF-L9IrEElJPgwKMdoauW8iNhu9No7sv1-_SIGDBqBxKnFra1R4nXmGUBYQrdhP-aloJOS_Sko"
TOKEN_URI = "https://oauth2.googleapis.com/token"
VIDEO_FILE = "output.mp4"  # ƒê∆∞·ªùng d·∫´n t·ªáp video
TITLE = "Your Video Title"
DESCRIPTION = "Your Video Description"
TAGS = ["tag1", "tag2"]
CATEGORY_ID = "22"  # V√≠ d·ª•: 22 l√† "People & Blogs"
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from googleapiclient.http import MediaIoBaseDownload
import requests
import os
import io

def download_from_drive(file_name, folder_id):
    access_token = refresh_access_token()
    credentials = Credentials(
        token=access_token,
        refresh_token=REFRESH_TOKEN,
        token_uri=TOKEN_URI,
        client_id=CLIENT_ID,
        client_secret=CLIENT_SECRET,
        scopes=["https://www.googleapis.com/auth/drive"]
    )

    service = build("drive", "v3", credentials=credentials)

    # T√¨m ki·∫øm file trong folder_id theo t√™n
    query = f"'{folder_id}' in parents and name = '{file_name}' and trashed = false"
    results = service.files().list(q=query, fields="files(id, name)").execute()
    items = results.get('files', [])

    if not items:
        raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y {file_name} trong folder {folder_id}")

    file_id = items[0]['id']

    # T·∫£i file v·ªÅ
    request = service.files().get_media(fileId=file_id)
    fh = io.FileIO(file_name, mode='wb')
    downloader = MediaIoBaseDownload(fh, request)

    done = False
    while not done:
        status, done = downloader.next_chunk()
        print(f"ƒêang t·∫£i: {int(status.progress() * 100)}%")

    print(f"ƒê√£ t·∫£i xong {file_name}")


# H√†m l√†m m·ªõi access_token
def refresh_access_token():
    response = requests.post(TOKEN_URI, data={
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "refresh_token": REFRESH_TOKEN,
        "grant_type": "refresh_token",
    })
    response_data = response.json()

    if "access_token" in response_data:
        return response_data["access_token"]
    else:
        raise Exception(f"L·ªói khi l√†m m·ªõi token: {response_data}")

# T·∫°o d·ªãch v·ª• YouTube API
def get_authenticated_service():
    access_token = refresh_access_token()
    credentials = Credentials(
        token=access_token,
        refresh_token=REFRESH_TOKEN,
        token_uri=TOKEN_URI,
        client_id=CLIENT_ID,
        client_secret=CLIENT_SECRET,
        scopes=["https://www.googleapis.com/auth/youtube.upload"]
    )
    return build("youtube", "v3", credentials=credentials)

# T·∫£i video l√™n google drive thay th·∫ø file n·∫øu ƒë√£ t·ªìn t·∫°i
def upload_to_drive_folder(file_path, folder_id):
    access_token = refresh_access_token()
    credentials = Credentials(
        token=access_token,
        refresh_token=REFRESH_TOKEN,
        token_uri=TOKEN_URI,
        client_id=CLIENT_ID,
        client_secret=CLIENT_SECRET,
        scopes=["https://www.googleapis.com/auth/drive.file"]
    )

    drive_service = build("drive", "v3", credentials=credentials)

    file_name = os.path.basename(file_path)  # ch·ªâ l·∫•y t√™n file, kh√¥ng l·∫•y ƒë∆∞·ªùng d·∫´n
    file_metadata = {
        "name": file_name,
        "parents": [folder_id]
    }
    media = MediaFileUpload(file_path, resumable=True)

    try:
        # T√¨m file tr√πng t√™n trong th∆∞ m·ª•c
        query = f"'{folder_id}' in parents and name='{file_name}' and trashed=false"
        response = drive_service.files().list(q=query, spaces='drive', fields='files(id, name)').execute()
        files = response.get('files', [])

        if files:
            # N·∫øu ƒë√£ t·ªìn t·∫°i file, th√¨ update
            file_id = files[0]['id']
            updated_file = drive_service.files().update(
                fileId=file_id,
                media_body=media,
                fields="id, webViewLink, webContentLink"
            ).execute()
            print("‚ôªÔ∏è ƒê√£ c·∫≠p nh·∫≠t file c≈© tr√™n Google Drive!")
            print("üÜî File ID:", updated_file["id"])
            print("üîó Link xem:", updated_file.get("webViewLink"))
            print("üîó Link t·∫£i:", updated_file.get("webContentLink"))
            return updated_file
        else:
            # N·∫øu ch∆∞a c√≥ file tr√πng t√™n, th√¨ t·∫°o m·ªõi
            created_file = drive_service.files().create(
                body=file_metadata,
                media_body=media,
                fields="id, webViewLink, webContentLink"
            ).execute()
            print("‚úÖ Upload th√†nh c√¥ng file m·ªõi l√™n Google Drive!")
            print("üÜî File ID:", created_file["id"])
            print("üîó Link xem:", created_file.get("webViewLink"))
            print("üîó Link t·∫£i:", created_file.get("webContentLink"))
            return created_file

    except Exception as e:
        print("‚ùå L·ªói upload:", e)


# T·∫£i video l√™n youtube v·ªõi ch·∫ø ƒë·ªô resumable upload
def upload_video_resumable():
    youtube = get_authenticated_service()
    request_body = {
        "snippet": {
            "title": "Your Video Title",
            "description": "Your Video Description",
            "tags": ["tag1", "tag2"],
            "categoryId": "22",
        },
        "status": {
            "privacyStatus": "private"
        },
    }

    media = MediaFileUpload(
        VIDEO_FILE,
        chunksize=1024 * 1024 * 8,
        resumable=True,
    )

    try:
        request = youtube.videos().insert(
            part="snippet,status",
            body=request_body,
            media_body=media,
        )

        response = None
        while response is None:
            status, response = request.next_chunk()
            if status:
                print(f"Uploaded {int(status.progress() * 100)}%")

        print("Upload ho√†n t·∫•t! Video ID:", response["id"])

    except Exception as e:
        print(f"ƒê√£ x·∫£y ra l·ªói: {e}")
